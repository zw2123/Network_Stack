// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module packet_handler_packet_identification (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_TVALID,
        eth_level_pkt_din,
        eth_level_pkt_num_data_valid,
        eth_level_pkt_fifo_cap,
        eth_level_pkt_full_n,
        eth_level_pkt_write,
        start_out,
        start_write,
        s_axis_TDATA,
        s_axis_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_TVALID;
output  [1023:0] eth_level_pkt_din;
input  [4:0] eth_level_pkt_num_data_valid;
input  [4:0] eth_level_pkt_fifo_cap;
input   eth_level_pkt_full_n;
output   eth_level_pkt_write;
output   start_out;
output   start_write;
input  [1023:0] s_axis_TDATA;
output   s_axis_TREADY;

reg ap_done;
reg ap_idle;
reg[1023:0] eth_level_pkt_din;
reg eth_level_pkt_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg    internal_ap_ready;
wire   [0:0] grp_nbreadreq_fu_88_p3;
reg    ap_predicate_op13_read_state1;
reg    ap_predicate_op19_read_state1;
reg    ap_predicate_op24_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] pi_fsm_state_load_reg_325;
reg   [0:0] tmp_1_i_reg_329;
reg    ap_predicate_op52_write_state2;
reg   [0:0] tmp_i_reg_341;
reg   [15:0] ethernetType_reg_345;
reg   [7:0] ipProtocol_reg_349;
reg   [0:0] icmp_ln181_reg_353;
reg    ap_predicate_op55_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] pi_fsm_state;
reg   [1:0] tdest_r;
reg    s_axis_TDATA_blk_n;
reg    eth_level_pkt_blk_n;
reg   [1:0] tdest_5_ph_i_reg_109;
wire   [576:0] trunc_ln228_fu_210_p1;
reg   [576:0] trunc_ln228_reg_333;
wire   [15:0] ethernetType_fu_234_p3;
wire   [7:0] ipProtocol_fu_252_p4;
wire   [0:0] icmp_ln181_fu_262_p2;
wire   [576:0] trunc_ln208_fu_268_p1;
reg   [576:0] trunc_ln208_reg_357;
reg   [1:0] ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10;
wire   [1:0] ap_phi_reg_pp0_iter0_tdest_5_ph_i_reg_109;
reg   [1:0] ap_phi_mux_storemerge_i_phi_fu_133_p4;
wire   [1:0] ap_phi_reg_pp0_iter0_storemerge_i_reg_130;
reg   [0:0] ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12;
wire   [0:0] grp_fu_196_p3;
wire   [0:0] ap_phi_reg_pp0_iter0_pi_fsm_state_flag_5_i_reg_141;
reg   [1:0] ap_phi_mux_pi_fsm_state_new_5_i_phi_fu_165_p12;
wire   [1:0] ap_phi_reg_pp0_iter0_pi_fsm_state_new_5_i_reg_162;
wire   [1:0] select_ln215_fu_272_p3;
wire   [1:0] ap_phi_reg_pp0_iter0_tdest_5_0_0_089133_i_reg_184;
reg   [1:0] ap_phi_reg_pp0_iter1_tdest_5_0_0_089133_i_reg_184;
wire   [1023:0] zext_ln228_fu_300_p1;
wire   [1023:0] zext_ln208_fu_314_p1;
wire   [7:0] tmp_7_i_fu_224_p4;
wire   [7:0] tmp_6_i_fu_214_p4;
wire   [3:0] ipVersion_fu_242_p4;
wire   [585:0] tmp_5_i_fu_291_p4;
wire   [585:0] tmp_9_i_fu_305_p4;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    regslice_both_s_axis_U_apdone_blk;
wire   [1023:0] s_axis_TDATA_int_regslice;
wire    s_axis_TVALID_int_regslice;
reg    s_axis_TREADY_int_regslice;
wire    regslice_both_s_axis_U_ack_in;
reg    ap_condition_393;
reg    ap_condition_397;
reg    ap_condition_401;
reg    ap_condition_60;
reg    ap_condition_224;
reg    ap_condition_237;
reg    ap_condition_139;
reg    ap_condition_268;
reg    ap_condition_198;
reg    ap_condition_206;
reg    ap_condition_209;
reg    ap_condition_212;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
#0 pi_fsm_state = 2'd0;
#0 tdest_r = 2'd0;
end

packet_handler_regslice_both #(
    .DataWidth( 1024 ))
regslice_both_s_axis_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_TDATA),
    .vld_in(s_axis_TVALID),
    .ack_in(regslice_both_s_axis_U_ack_in),
    .data_out(s_axis_TDATA_int_regslice),
    .vld_out(s_axis_TVALID_int_regslice),
    .ack_out(s_axis_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((1'b1 == ap_condition_237)) begin
            ap_phi_reg_pp0_iter1_tdest_5_0_0_089133_i_reg_184 <= 2'd3;
        end else if ((1'b1 == ap_condition_224)) begin
            ap_phi_reg_pp0_iter1_tdest_5_0_0_089133_i_reg_184 <= ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tdest_5_0_0_089133_i_reg_184 <= ap_phi_reg_pp0_iter0_tdest_5_0_0_089133_i_reg_184;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_139)) begin
        if ((1'b1 == ap_condition_212)) begin
            tdest_5_ph_i_reg_109 <= 2'd1;
        end else if ((1'b1 == ap_condition_209)) begin
            tdest_5_ph_i_reg_109 <= 2'd2;
        end else if ((1'b1 == ap_condition_206)) begin
            tdest_5_ph_i_reg_109 <= 2'd3;
        end else if ((1'b1 == ap_condition_198)) begin
            tdest_5_ph_i_reg_109 <= 2'd0;
        end else if ((1'b1 == 1'b1)) begin
            tdest_5_ph_i_reg_109 <= ap_phi_reg_pp0_iter0_tdest_5_ph_i_reg_109;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ethernetType_reg_345 <= ethernetType_fu_234_p3;
        icmp_ln181_reg_353 <= icmp_ln181_fu_262_p2;
        ipProtocol_reg_349 <= {{s_axis_TDATA_int_regslice[191:184]}};
        pi_fsm_state_load_reg_325 <= pi_fsm_state;
        tmp_1_i_reg_329 <= grp_nbreadreq_fu_88_p3;
        tmp_i_reg_341 <= grp_nbreadreq_fu_88_p3;
        trunc_ln208_reg_357 <= trunc_ln208_fu_268_p1;
        trunc_ln228_reg_333 <= trunc_ln228_fu_210_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12 == 1'd1))) begin
        pi_fsm_state <= ap_phi_mux_pi_fsm_state_new_5_i_phi_fu_165_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & ~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (tmp_i_reg_341 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        tdest_r <= ap_phi_reg_pp0_iter1_tdest_5_0_0_089133_i_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage0_iter1)) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1))) begin
        ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12 = 1'd1;
    end else if (((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd0)) | ((grp_nbreadreq_fu_88_p3 == 1'd0) & (pi_fsm_state == 2'd2)) | ((grp_nbreadreq_fu_88_p3 == 1'd0) & (pi_fsm_state == 2'd1)))) begin
        ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12 = 1'd0;
    end else if ((((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd2)) | ((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd1)))) begin
        ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12 = s_axis_TDATA_int_regslice[1024'd576];
    end else begin
        ap_phi_mux_pi_fsm_state_flag_5_i_phi_fu_144_p12 = ap_phi_reg_pp0_iter0_pi_fsm_state_flag_5_i_reg_141;
    end
end

always @ (*) begin
    if ((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1))) begin
        ap_phi_mux_pi_fsm_state_new_5_i_phi_fu_165_p12 = select_ln215_fu_272_p3;
    end else if ((((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd2)) | ((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd1)) | ((grp_nbreadreq_fu_88_p3 == 1'd0) & (pi_fsm_state == 2'd1)))) begin
        ap_phi_mux_pi_fsm_state_new_5_i_phi_fu_165_p12 = 2'd0;
    end else begin
        ap_phi_mux_pi_fsm_state_new_5_i_phi_fu_165_p12 = ap_phi_reg_pp0_iter0_pi_fsm_state_new_5_i_reg_162;
    end
end

always @ (*) begin
    if (((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & ~(ethernetType_fu_234_p3 == 16'd2048) & ~(ethernetType_fu_234_p3 == 16'd2054) & (grp_nbreadreq_fu_88_p3 == 1'd1)) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & ~(ipProtocol_fu_252_p4 == 8'd1) & ~(ipProtocol_fu_252_p4 == 8'd6) & ~(ipProtocol_fu_252_p4 == 8'd17) & ~(ethernetType_fu_234_p3 == 16'd2054) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd1)))) begin
        ap_phi_mux_storemerge_i_phi_fu_133_p4 = 2'd2;
    end else if ((((((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd6) & (ethernetType_fu_234_p3 == 16'd2048)) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd17) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd1) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd0) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ethernetType_fu_234_p3 == 16'd2054)))) begin
        ap_phi_mux_storemerge_i_phi_fu_133_p4 = 2'd1;
    end else begin
        ap_phi_mux_storemerge_i_phi_fu_133_p4 = ap_phi_reg_pp0_iter0_storemerge_i_reg_130;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_60)) begin
        if ((1'b1 == ap_condition_401)) begin
            ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = 2'd1;
        end else if ((1'b1 == ap_condition_397)) begin
            ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = 2'd2;
        end else if ((1'b1 == ap_condition_393)) begin
            ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = 2'd3;
        end else if ((ethernetType_fu_234_p3 == 16'd2054)) begin
            ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = 2'd0;
        end else begin
            ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = ap_phi_reg_pp0_iter0_tdest_5_ph_i_reg_109;
        end
    end else begin
        ap_phi_mux_tdest_5_ph_i_phi_fu_112_p10 = ap_phi_reg_pp0_iter0_tdest_5_ph_i_reg_109;
    end
end

always @ (*) begin
    if ((((ap_predicate_op52_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op55_write_state2 == 1'b1)))) begin
        eth_level_pkt_blk_n = eth_level_pkt_full_n;
    end else begin
        eth_level_pkt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_268)) begin
        if ((ap_predicate_op55_write_state2 == 1'b1)) begin
            eth_level_pkt_din = zext_ln208_fu_314_p1;
        end else if ((ap_predicate_op52_write_state2 == 1'b1)) begin
            eth_level_pkt_din = zext_ln228_fu_300_p1;
        end else begin
            eth_level_pkt_din = 'bx;
        end
    end else begin
        eth_level_pkt_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (ap_predicate_op52_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_predicate_op55_write_state2 == 1'b1)))) begin
        eth_level_pkt_write = 1'b1;
    end else begin
        eth_level_pkt_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (ap_predicate_op24_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (real_start == 1'b1)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (real_start == 1'b1)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (ap_predicate_op13_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (real_start == 1'b1)))) begin
        s_axis_TDATA_blk_n = s_axis_TVALID_int_regslice;
    end else begin
        s_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_predicate_op24_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1)) | (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (ap_predicate_op13_read_state1 == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
        s_axis_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | ((ap_predicate_op24_read_state1 == 1'b1) & (s_axis_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op19_read_state1 == 1'b1) & (s_axis_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op13_read_state1 == 1'b1) & (s_axis_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op52_write_state2 == 1'b1) & (eth_level_pkt_full_n == 1'b0)) | ((eth_level_pkt_full_n == 1'b0) & (ap_predicate_op55_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_condition_139 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_pp0_stage0_iter1))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_198 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ethernetType_fu_234_p3 == 16'd2054));
end

always @ (*) begin
    ap_condition_206 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd17) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_209 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd6) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_212 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd1) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_224 = (((((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd6) & (ethernetType_fu_234_p3 == 16'd2048)) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd17) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd1) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd0) & (ethernetType_fu_234_p3 == 16'd2048))) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (ethernetType_fu_234_p3 == 16'd2054)));
end

always @ (*) begin
    ap_condition_237 = ((~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & ~(ethernetType_fu_234_p3 == 16'd2048) & ~(ethernetType_fu_234_p3 == 16'd2054) & (grp_nbreadreq_fu_88_p3 == 1'd1)) | (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & ~(ipProtocol_fu_252_p4 == 8'd1) & ~(ipProtocol_fu_252_p4 == 8'd6) & ~(ipProtocol_fu_252_p4 == 8'd17) & ~(ethernetType_fu_234_p3 == 16'd2054) & (grp_nbreadreq_fu_88_p3 == 1'd1) & (icmp_ln181_fu_262_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_268 = (~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_condition_393 = ((icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd17) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_397 = ((icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd6) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_401 = ((icmp_ln181_fu_262_p2 == 1'd1) & (ipProtocol_fu_252_p4 == 8'd1) & (ethernetType_fu_234_p3 == 16'd2048));
end

always @ (*) begin
    ap_condition_60 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1));
end

assign ap_phi_reg_pp0_iter0_pi_fsm_state_flag_5_i_reg_141 = 'bx;

assign ap_phi_reg_pp0_iter0_pi_fsm_state_new_5_i_reg_162 = 'bx;

assign ap_phi_reg_pp0_iter0_storemerge_i_reg_130 = 'bx;

assign ap_phi_reg_pp0_iter0_tdest_5_0_0_089133_i_reg_184 = 'bx;

assign ap_phi_reg_pp0_iter0_tdest_5_ph_i_reg_109 = 'bx;

always @ (*) begin
    ap_predicate_op13_read_state1 = ((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd1));
end

always @ (*) begin
    ap_predicate_op19_read_state1 = ((grp_nbreadreq_fu_88_p3 == 1'd1) & (pi_fsm_state == 2'd2));
end

always @ (*) begin
    ap_predicate_op24_read_state1 = (~(pi_fsm_state == 2'd2) & ~(pi_fsm_state == 2'd1) & (grp_nbreadreq_fu_88_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op52_write_state2 = ((tmp_1_i_reg_329 == 1'd1) & (pi_fsm_state_load_reg_325 == 2'd1));
end

always @ (*) begin
    ap_predicate_op55_write_state2 = (((((~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & (ethernetType_reg_345 == 16'd2048) & (tmp_i_reg_341 == 1'd1) & (ipProtocol_reg_349 == 8'd6)) | (~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & (ethernetType_reg_345 == 16'd2048) & (tmp_i_reg_341 == 1'd1) & (ipProtocol_reg_349 == 8'd17))) | (~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & (ethernetType_reg_345 == 16'd2048) & (tmp_i_reg_341 == 1'd1) & (ipProtocol_reg_349 == 8'd1))) | (~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & (ethernetType_reg_345 == 16'd2048) & (tmp_i_reg_341 == 1'd1) & (icmp_ln181_reg_353 == 1'd0))) | (~(pi_fsm_state_load_reg_325 == 2'd2) & ~(pi_fsm_state_load_reg_325 == 2'd1) & (ethernetType_reg_345 == 16'd2054) & (tmp_i_reg_341 == 1'd1)));
end

assign ap_ready = internal_ap_ready;

assign ethernetType_fu_234_p3 = {{tmp_7_i_fu_224_p4}, {tmp_6_i_fu_214_p4}};

assign grp_fu_196_p3 = s_axis_TDATA_int_regslice[1024'd576];

assign grp_nbreadreq_fu_88_p3 = s_axis_TVALID_int_regslice;

assign icmp_ln181_fu_262_p2 = ((ipVersion_fu_242_p4 == 4'd4) ? 1'b1 : 1'b0);

assign ipProtocol_fu_252_p4 = {{s_axis_TDATA_int_regslice[191:184]}};

assign ipVersion_fu_242_p4 = {{s_axis_TDATA_int_regslice[119:116]}};

assign s_axis_TREADY = regslice_both_s_axis_U_ack_in;

assign select_ln215_fu_272_p3 = ((grp_fu_196_p3[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_storemerge_i_phi_fu_133_p4);

assign start_out = real_start;

assign tmp_5_i_fu_291_p4 = {{{tdest_r}, {7'd0}}, {trunc_ln228_reg_333}};

assign tmp_6_i_fu_214_p4 = {{s_axis_TDATA_int_regslice[111:104]}};

assign tmp_7_i_fu_224_p4 = {{s_axis_TDATA_int_regslice[103:96]}};

assign tmp_9_i_fu_305_p4 = {{{tdest_5_ph_i_reg_109}, {7'd0}}, {trunc_ln208_reg_357}};

assign trunc_ln208_fu_268_p1 = s_axis_TDATA_int_regslice[576:0];

assign trunc_ln228_fu_210_p1 = s_axis_TDATA_int_regslice[576:0];

assign zext_ln208_fu_314_p1 = tmp_9_i_fu_305_p4;

assign zext_ln228_fu_300_p1 = tmp_5_i_fu_291_p4;

endmodule //packet_handler_packet_identification
